#! /usr/bin/env node
// coding: utf-8
// author: ruandao(ljy080829@gmail.com)

/*
 * Object has following:
 *  method: done, main, get, post, dispatch
 *  property: get_list, post_list
 *
 *  method done need to assign app to this.app
 *    and run main() 
 *
 */
function _done(app){

  this.app = app;
  this.main();
}

/*
 * Object has following:
 *  method: done, main, get, post, dispatch
 *  property: app, get_list, post_list
 *
 * method main was used by user to setting (path, func) mapping
 * and user must override it
 *
 */
function _main(){
  error('the method main should be override by user!');
}

/*
 * Object has following:
 *  method: done, main, get, post, dispatch
 *  property: app, get_list, post_list
 *
 *  method post was used to wrap app.post to add prefix
 *
 */
function _post(path, func) {
  path = this.prefix + path;
  this.app.post(path, func);
}

/*
 * Object has following:
 *  method: done, main, get, post, dispatch
 *  property: app, get_list, post_list
 *
 *  method get was used to wrap app.get to add prefix to path
 *
 */
function _get(path, func) {
  path = this.prefix + path;
  this.app.get(path,func);
}

/*
 * Object has following:
 *  method: done, main, get, post, dispatch
 *  property: app, get_list, post_list
 *
 *  method dispatch was used to dispatch some 
 *  prefix to some sub url route
 *
 */
function _dispatch(prefix, route) {
  if ('string' != typeof prefix) {
    route = prefix;
    prefix = '';
  }
  if ('object' != typeof route) 
    error('route must be a url function but given a %s!'.replace('%s', typeof route));

  // make sure prefix end with '/'
  if( prefix.charAt(prefix.length-1) != '/') prefix += '/';
  route.prefix = this.prefix + prefix;
  route.app = this.app;
  route.main();
}
/*
 * Object has following:
 *  method: done, main, get, post, dispatch
 *  property: app, get_list, post_list
 *
 */
function Routes(){
  this.get_list = [];
  this.post_list = [];
  this.prefix = '/';

//  this.main();
}
Routes.prototype = {
      'done': _done,
      'main': _main,
      'post': _post,
      'get' : _get,
  'dispatch': _dispatch
}
function Recursive(){
}
Recursive.prototype.__defineGetter__('Routes', function(){return new Routes;});
module.exports = new Recursive;
