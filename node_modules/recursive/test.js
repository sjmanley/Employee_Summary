#! /usr/bin/env node
// coding: utf-8
// author: ruandao(ljy080829@gmail.com)

// use : node test.js

var error = require('./lib/testUtil').error;

var recursive = require('./lib/recursive');

(function runTest() {
    console.log('runTest: ' + __filename);

    /*
     *
     * simulate app to test data
     * the app should have the following method:
     *  get(path, func);
     *  post(path, func);
     * and property get_list, post_list
     *
    */
    function App(){

      /*
       *  simple test the argument type
      */
      function testFun(list) {
        return function(path, func){
          if('string' != typeof path)
            error('the first argument must be a String object');

          if('function' != typeof func)
            error('the argument 2 must be a function');

          list.push([path, func]);
        }
      }

      this.get_list = [];
      this.post_list = [];
      this.get = testFun(this.get_list);
      this.post = testFun(this.post_list);
    }


    // test Result
    var testResult_get = [
      ['/', empty],
      ['/News/', empty],
      ['/T/', empty],
      // for sub_route
      ['/register/', empty],
      ['/register/WWW/', empty],
      ['/register/joon', empty],
    ]
    var testResult_post = [
      ['/News/', empty],
      ['/T/', empty],
      // for sub_route
      ['/register/WWW/', empty],
      ['/register/joon', empty],
    ]

    // testData 
    function empty() {}

    function sub_route_main() {
      this.get('', empty);
      this.get('WWW/', empty);
      this.get('joon', empty);
      
      this.post('WWW/', empty);
      this.post('joon', empty);
    }

    function route_main() {
      this.get('', empty);
      this.get('News/', empty);
      this.get('T/', empty);

      this.post('News/', empty);
      this.post('T/', empty);

      this.dispatch('register/', sub_route);
    }

    
    var routes = recursive.Routes;
    var sub_route = recursive.Routes;
    sub_route.main = sub_route_main;

    var app = new App();

    routes.main = route_main;
    routes.done(app);

    function cmpArray(arrayA, arrayB, method) {
      /*
       * each element of array must has two object
       *
       */
      var length = arrayA.length == arrayB.length 
      ? arrayA.length 
      : error('%s list length not equal \narrayA: %s\narrayB: %s\n'
                .replace('%s', method)
                .replace('%s', arrayA)
                .replace('%s', arrayB));
      for(var i=0; i<length; i++) 
        if(arrayA[i].toString() !== arrayB[i].toString())
          error('%s list\'s element index of %d not equal'
                   .replace('%s', method).replace('%d', i+1))
    }
    cmpArray(testResult_get, app.get_list, 'get');
    cmpArray(testResult_post, app.post_list, 'post');

  })();
